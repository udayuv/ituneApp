{"version":3,"sources":["components/card.js","components/NoResult.js","components/CardContainer.js","modules/apiUtil.js","modules/reducer.js","App.js","modules/repoApi.js","saga/saga.js","store/store.js","index.js"],"names":["Meta","Card","SongCard","id","artistName","image","collectionName","hoverable","style","width","cover","alt","src","title","description","NoResult","className","CardContainer","baseURL","songList","count","undefined","map","song","key","xs","span","offset","lg","artworkUrl100","collectionCensoredName","preview","previewUrl","createActions","requestGetApi","successGetApi","failureGetApi","actionTypes","Types","actionCreators","Creators","initialState","searchKey","searchData","searchError","actionReducer","state","action","produce","draft","type","REQUEST_GET_API","SUCCESS_GET_API","data","FAILURE_GET_API","get","error","connect","store","dispatch","dispatchRequestApi","repoName","useState","setsearchKey","justify","onChange","evt","target","value","placeholder","onClick","sName","isEmpty","results","resultCount","ituneApi","create","headers","getSongs","getSongList","actionSaga","call","response","ok","console","log","put","takeLatest","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","run","document","querySelector","render"],"mappings":"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","file":"static/js/main.cc4eb9d5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card } from \"antd\";\r\n\r\nconst { Meta } = Card;\r\n\r\nfunction SongCard({id, artistName,image, collectionName}) {\r\n  return (\r\n    <div>\r\n      <Card\r\n        hoverable\r\n        id={id}\r\n        style={{ width: 240 }}\r\n        cover={\r\n          <img\r\n            alt={artistName}\r\n            src={image}\r\n          />\r\n        }\r\n      >\r\n        <Meta title={artistName} description={collectionName} />\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SongCard;\r\n","import React from 'react';\n\nfunction NoResult() {\n    let nothingToShowText = 'I don\\'t have to show anything .'\n        return (\n            <div className=\"no-results\">\n                <h1>{nothingToShowText}</h1>\n            </div>\n        );\n}\n\nexport default NoResult\n","import React from \"react\";\r\nimport SongCard from \"./card\";\r\nimport { Row, Col } from \"antd\";\r\nimport NoResults from \"./NoResult\";\r\n\r\nfunction CardContainer({ songList, count }) {\r\n  if (songList === undefined) {\r\n    songList = [];\r\n  }\r\n  return (\r\n    <div>\r\n      <Row>\r\n      {count <= 0 ? ( <NoResults/>) : null}\r\n        {songList.map((song, key) => (\r\n          <Col xs={{ span: 11, offset: 1 }} lg={{ span: 3, offset: 2 }}>\r\n            <SongCard\r\n              id={key}\r\n              artistName={song.artistName}\r\n              image={song.artworkUrl100}\r\n              collectionName={song.collectionCensoredName}\r\n              preview={song.previewUrl}\r\n            />\r\n          </Col>\r\n        ))}\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardContainer;\r\n","import { create } from 'apisauce';\r\n\r\nexport const createiTuneApi = baseURL => {\r\n  const api = create({\r\n    baseURL,\r\n    headers: { 'Content-Type': 'application/json' }\r\n  });\r\n  return api;\r\n};\r\n","import produce from 'immer';\r\nimport { createActions } from 'reduxsauce';\r\nimport get from 'lodash/get';\r\n\r\nexport const { Types: actionTypes, Creators: actionCreators } = createActions({\r\n  requestGetApi: ['searchKey'],\r\n  successGetApi: ['data'],\r\n  failureGetApi: ['error']\r\n});\r\nexport const initialState = { searchKey: null, searchData: [], searchError: null };\r\n\r\n/* eslint-disable default-case, no-param-reassign */\r\nexport const actionReducer = (state = initialState, action) =>\r\n  produce(state, draft => {\r\n    switch (action.type) {\r\n      case actionTypes.REQUEST_GET_API:\r\n        draft.searchKey = action.searchKey;\r\n        break;\r\n      case actionTypes.SUCCESS_GET_API:\r\n        draft.searchData = action.data;\r\n        break;\r\n      case actionTypes.FAILURE_GET_API:\r\n        draft.searchError = get(action.error, 'message', 'something_went_wrong');\r\n        break;\r\n    }\r\n  });\r\n\r\nexport default actionReducer;","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport CardContainer from \"./components/CardContainer\";\r\nimport { actionCreators } from \"./modules/reducer\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport { Button, Input, Row, Col } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nconst App = ({ dispatchRequestApi, songList }) => {\r\n  const [searchKey, setsearchKey] = useState(\"\");\r\n\r\n  const handleOnSubmit = (sName) => {\r\n    if (!isEmpty(sName)) {\r\n      dispatchRequestApi(sName);\r\n    } else {\r\n      dispatchRequestApi(\"itune\");\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <br />\r\n      <Row justify=\"center\">\r\n        <Col xs={{ span: 5, offset: 1 }} lg={{ span: 6, offset: 2 }}>\r\n          <Input\r\n            type=\"text\"\r\n            onChange={(evt) => setsearchKey(evt.target.value)}\r\n            placeholder=\"Enter keyword to search\"\r\n          />\r\n        </Col>\r\n        <Col xs={{ span: 5, offset: 1 }} lg={{ span: 6, offset: 2 }}>\r\n          <Button type=\"primary\" onClick={() => handleOnSubmit(searchKey)}>\r\n            Search\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n      <br />\r\n      <br />\r\n      <CardContainer songList={songList.results} count={songList.resultCount} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStoreToProps = (store) => {\r\n  return {\r\n    songList: store.searchData\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  const { requestGetApi } = actionCreators;\r\n  return {\r\n    dispatchRequestApi: (repoName) => dispatch(requestGetApi(repoName)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStoreToProps, mapDispatchToProps)(App);\r\n","import { createiTuneApi } from './apiUtil';\r\n\r\nconst ITUNE_URL = 'https://itunes.apple.com/search';\r\nconst ituneApi = createiTuneApi(ITUNE_URL);\r\n\r\nexport const getSongs = searchKey => ituneApi.get(`?term=${searchKey}`);","import { put, call, takeLatest } from 'redux-saga/effects';\r\nimport { getSongs } from '../modules/repoApi';\r\nimport { actionTypes, actionCreators } from '../modules/reducer';\r\n\r\nconst { REQUEST_GET_API } = actionTypes;\r\nconst { successGetApi, failureGetApi } = actionCreators;\r\nexport function* getSongList(action) {\r\n  const response = yield call(getSongs, action.searchKey);\r\n  const { data, ok } = response;\r\n  if (ok) {\r\n    console.log(\"ok data\", data);\r\n    yield put(successGetApi(data));\r\n    \r\n  } else {\r\n    console.log(\"failed data\");\r\n    yield put(failureGetApi(data));\r\n    \r\n  }\r\n}\r\n// Individual exports for testing\r\nexport default function* actionSaga() {\r\n  yield takeLatest(REQUEST_GET_API, getSongList);\r\n}","import { createStore, applyMiddleware } from 'redux'\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport actionReducer from '../modules/reducer';\r\nimport actionSaga  from '../saga/saga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\nconst store = createStore(\r\n    actionReducer,\r\n  applyMiddleware(sagaMiddleware)\r\n)\r\nsagaMiddleware.run(actionSaga)\r\n\r\nexport default store","import React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './App'\nimport store from './store/store'\n\n\nconst target = document.querySelector('#root')\n\nrender(\n    <Provider store={store}>\n            <div>\n                <App />\n            </div>\n    </Provider>,\n    target\n)"],"sourceRoot":""}